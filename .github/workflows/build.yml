name: Release
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS builds
          # - platform: macos-latest
          #   target: x86_64-apple-darwin
          - platform: macos-latest
            target: aarch64-apple-darwin
          # # Windows builds
          # - platform: windows-latest
          #   target: x86_64-pc-windows-msvc
          # # Linux builds
          # - platform: ubuntu-latest
          #   target: x86_64-unknown-linux-gnu
          
    runs-on: ${{ matrix.platform }}
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      # Windows 特定的依赖安装
      # - name: Install Windows Dependencies
      #   if: matrix.platform == 'windows-latest'
      #   run: |
      #     rustup target add x86_64-pc-windows-msvc

      # - name: Install dependencies (ubuntu only)
      #   if: matrix.platform == 'ubuntu-latest'
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y \
      #       libgtk-3-dev \
      #       libwebkit2gtk-4.0-dev \
      #       libappindicator3-dev \
      #       librsvg2-dev \
      #       patchelf \
      #       libjavascriptcoregtk-4.1-dev \
      #       libsoup-3.0-dev \
      #       libwebkit2gtk-4.1-dev
      #   continue-on-error: true

      - name: Install dependencies (macos only)
        if: matrix.platform == 'macos-latest'
        run: |
          rustup target add aarch64-apple-darwin
          # rustup target add x86_64-apple-darwin

      - name: Install frontend dependencies
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: pnpm install
        continue-on-error: true

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: v__VERSION__
          releaseName: 'EPlayer v__VERSION__'
          releaseBody: '请查看 CHANGELOG.md 了解详细更新内容。'
          releaseDraft: false
          prerelease: false
          args: --target ${{ matrix.target }}
        continue-on-error: true

  sync-to-gitee: 
    needs: release  # 等待 release job 完成后才执行
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get release
        id: get_release
        uses: actions/github-script@v7
        with:
          script: |
            const release = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            return release.data;

      - name: Download release assets
        run: |
          mkdir -p release_assets
          cd release_assets
          for asset_url in $(echo '${{ steps.get_release.outputs.result }}' | jq -r '.assets[].browser_download_url'); do
            wget $asset_url
          done

      - name: Create version.json
        run: |
          echo '{
            "version": "${{ fromJson(steps.get_release.outputs.result).tag_name }}",
            "notes": "${{ fromJson(steps.get_release.outputs.result).body }}",
            "pub_date": "${{ fromJson(steps.get_release.outputs.result).published_at }}",
            "platforms": {
              "darwin-x86_64": {
                "signature": "",
                "url": "'$(echo '${{ steps.get_release.outputs.result }}' | jq -r '.assets[] | select(.name | test(".*x86_64-apple-darwin.*\\.dmg$")) | .browser_download_url')'"
              },
              "darwin-aarch64": {
                "signature": "",
                "url": "'$(echo '${{ steps.get_release.outputs.result }}' | jq -r '.assets[] | select(.name | test(".*aarch64-apple-darwin.*\\.dmg$")) | .browser_download_url')'"
              },
              "windows-x86_64": {
                "signature": "",
                "url": "'$(echo '${{ steps.get_release.outputs.result }}' | jq -r '.assets[] | select(.name | test(".*x64.*\\.msi$")) | .browser_download_url')'"
              },
              "linux-x86_64": {
                "signature": "",
                "url": "'$(echo '${{ steps.get_release.outputs.result }}' | jq -r '.assets[] | select(.name | test(".*x86_64-unknown-linux-gnu.*\\.AppImage$")) | .browser_download_url')'"
              }
            }
          }' > version.json

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Clone Gitee repository
        run: |
          git clone https://gitee.com/xzkids/eplayer-assets.git gitee-repo
          cp release_assets/* gitee-repo/
          cp version.json gitee-repo/
          cd gitee-repo
          git add .
          git commit -m "Update from GitHub Actions"
          git push https://${{ secrets.GITEE_USERNAME }}:${{ secrets.GITEE_TOKEN }}@gitee.com/xzkids/eplayer-assets.git

      - name: Upload assets to Gitee
        uses: yanglbme/gitee-pages-action@main
        with:
          gitee-username: ${{ secrets.GITEE_USERNAME }}
          gitee-password: ${{ secrets.GITEE_PASSWORD }}
          gitee-repo: xzkids/eplayer-assets
          branch: master
          directory: release_assets
          https: true