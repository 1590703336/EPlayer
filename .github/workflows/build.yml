name: Release
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS Universal Binary
          - platform: macos-latest
            target: universal-apple-darwin
          # Windows builds
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
          # Linux builds
          - platform: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          
    runs-on: ${{ matrix.platform }}
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install Windows Dependencies
        if: matrix.platform == 'windows-latest'
        run: |
          rustup target add x86_64-pc-windows-msvc

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.0-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libjavascriptcoregtk-4.1-dev \
            libsoup-3.0-dev \
            libwebkit2gtk-4.1-dev
        continue-on-error: true

      - name: Install dependencies (macos only)
        if: matrix.platform == 'macos-latest'
        run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin

      - name: Install frontend dependencies
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: pnpm install
        continue-on-error: true

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          MACOS_UNIVERSAL_BINARY: true
        with:
          tagName: v__VERSION__
          releaseName: 'EPlayer v__VERSION__'
          releaseBody: '请查看 CHANGELOG.md 了解详细更新内容。'
          releaseDraft: false
          prerelease: false
          args: --target ${{ matrix.target }}
        continue-on-error: true

  sync-to-gitee: 
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get release
        id: get_release
        uses: actions/github-script@v7
        with:
          script: |
            const release = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            return release.data;

      - name: Download release assets
        run: |
          mkdir -p release_assets
          cd release_assets
          # 下载 dmg、msi 和 setup.exe 文件
          for asset_url in $(echo '${{ steps.get_release.outputs.result }}' | jq -r '.assets[] | select(.name | test("\\.(dmg|msi|exe)$")) | .browser_download_url'); do
            wget $asset_url
          done

      - name: Create version.json
        run: |
          echo '{
            "version": "${{ fromJson(steps.get_release.outputs.result).tag_name }}",
            "notes": "${{ fromJson(steps.get_release.outputs.result).body }}",
            "pub_date": "${{ fromJson(steps.get_release.outputs.result).published_at }}",
            "platforms": {
              "darwin-universal": {
                "signature": "'$(echo '${{ steps.get_release.outputs.result }}' | jq -r '.assets[] | select(.name | test(".*universal.*\\.app\\.tar\\.gz\\.sig$")) | .browser_download_url' | xargs wget -qO-)'",
                "url": "https://gitee.com/xzkids/eplayer-assets/raw/master/'$(echo '${{ steps.get_release.outputs.result }}' | jq -r '.assets[] | select(.name | test(".*universal.*\\.dmg$")) | .name')'"
              },
              "windows-x86_64": {
                "signature": "'$(echo '${{ steps.get_release.outputs.result }}' | jq -r '.assets[] | select(.name | test(".*x64.*\\.msi\\.sig$")) | .browser_download_url' | xargs wget -qO-)'",
                "url": "https://gitee.com/xzkids/eplayer-assets/raw/master/'$(echo '${{ steps.get_release.outputs.result }}' | jq -r '.assets[] | select(.name | test(".*x64.*\\.msi$")) | .name')'"
              },
              "windows-x86_64-setup": {
                "signature": "'$(echo '${{ steps.get_release.outputs.result }}' | jq -r '.assets[] | select(.name | test(".*setup.*\\.exe\\.sig$")) | .browser_download_url' | xargs wget -qO-)'",
                "url": "https://gitee.com/xzkids/eplayer-assets/raw/master/'$(echo '${{ steps.get_release.outputs.result }}' | jq -r '.assets[] | select(.name | test(".*setup.*\\.exe$")) | .name')'"
              },
              "linux-x86_64": {
                "signature": "'$(echo '${{ steps.get_release.outputs.result }}' | jq -r '.assets[] | select(.name | test(".*_amd64\\.deb\\.sig$")) | .browser_download_url' | xargs wget -qO-)'",
                "url": "https://gitee.com/xzkids/eplayer-assets/raw/master/'$(echo '${{ steps.get_release.outputs.result }}' | jq -r '.assets[] | select(.name | test(".*_amd64\\.deb$")) | .name')'"
              }
            }
          }' > version.json

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Clone and update Gitee repository
        run: |
          # 使用浅克隆，只获取最新版本
          git clone --depth 1 https://gitee.com/xzkids/eplayer-assets.git gitee-repo
          # 清空目录（保留 .git）
          cd gitee-repo
          git rm -rf .
          git clean -fdx
          # 复制 dmg、msi 和 setup.exe 文件
          cp ../release_assets/*.dmg . 2>/dev/null || true
          cp ../release_assets/*.msi . 2>/dev/null || true
          cp ../release_assets/*setup*.exe . 2>/dev/null || true
          cp ../release_assets/*.deb . 2>/dev/null || true
          cp ../version.json .
          # 提交更改
          git add .
          git commit -m "Update installers and version.json from GitHub Actions"
          git push https://${{ secrets.GITEE_USERNAME }}:${{ secrets.GITEE_TOKEN }}@gitee.com/xzkids/eplayer-assets.git master --force

      - name: Sync version.json to EPLayer_website
        env:
          GH_TOKEN: ${{ secrets.WEBSITE_TOKEN }}
        run: |
          # 克隆 EPLayer_website 仓库（使用 token 认证）
          git clone https://${GH_TOKEN}@github.com/smstone2006/EPLayer_website.git website-repo
          # 复制 version.json 到根目录
          cp version.json website-repo/
          # 提交更改
          cd website-repo
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add version.json
          git commit -m "Update version.json from GitHub Actions"
          git push origin main
